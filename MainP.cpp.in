/************************************************************************/
/* $Id: MainP.cpp 65 2010-09-08 06:48:36Z yan.qi.asu $                                                                 */
/************************************************************************/

#include <limits>
#include <set>
#include <map>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
#include <iostream>
#include <algorithm>
#include "GraphElements.h"
#include "Graph.h"
#include "DijkstraShortestPathAlg.h"
#include "YenTopKShortestPathsAlg.h"

using namespace std;


void testDijkstraGraph()
{
	Graph* my_graph_pt = new Graph("@KShortestPaths_SOURCE_DIR@/data/test_15");
	DijkstraShortestPathAlg shortest_path_alg(my_graph_pt);
	BasePath* result = 
		shortest_path_alg.get_shortest_path(
			my_graph_pt->get_vertex(0), my_graph_pt->get_vertex(5));
	result->PrintOut(cout);
}

void testYenAlg(int k)
{
	//Graph my_graph("data/test_6_2");
	Graph my_graph("@KShortestPaths_SOURCE_DIR@/data/test_50");

  int i=0;

  if( k <= 0 )
  {
	YenTopKShortestPathsAlg yenAlg(my_graph, my_graph.get_vertex(0), 
		my_graph.get_vertex(5));

	  while(yenAlg.has_next())
	  {
		  ++i;
  		yenAlg.next()->PrintOut(cout);
	  }
  }
  else
  {
  vector< BasePath* > paths;

  YenTopKShortestPathsAlg yenAlg(my_graph );
  yenAlg.get_shortest_paths( my_graph.get_vertex(0), my_graph.get_vertex(5), k, paths );

  vector< BasePath* >::const_iterator it = paths.begin();

  while( it != paths.end() )
	  {
    (*it)->PrintOut(cout);
		++it;
	  }

  }

// 	System.out.println("Result # :"+i);
// 	System.out.println("Candidate # :"+yenAlg.get_cadidate_size());
// 	System.out.println("All generated : "+yenAlg.get_generated_path_size());

}

int main( int argc, char* argv[] )
{
  int kk = 0;
  if( argc == 2 )
  {
    kk = atoi( argv[1] );
  }
	cout << "Welcome to the real world!" << endl;

	/*testDijkstraGraph();*/
	testYenAlg( kk );

  return EXIT_SUCCESS;
}
